/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.InvoicesRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoices extends TableImpl<InvoicesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.invoices</code>
     */
    public static final Invoices INVOICES = new Invoices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoicesRecord> getRecordType() {
        return InvoicesRecord.class;
    }

    /**
     * The column <code>public.invoices.id</code>.
     */
    public final TableField<InvoicesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invoices.num</code>.
     */
    public final TableField<InvoicesRecord, String> NUM = createField(DSL.name("num"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.invoices.date</code>.
     */
    public final TableField<InvoicesRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.invoices.organization_id</code>.
     */
    public final TableField<InvoicesRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Invoices(Name alias, Table<InvoicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.invoices</code> table reference
     */
    public Invoices(String alias) {
        this(DSL.name(alias), INVOICES);
    }

    /**
     * Create an aliased <code>public.invoices</code> table reference
     */
    public Invoices(Name alias) {
        this(alias, INVOICES);
    }

    /**
     * Create a <code>public.invoices</code> table reference
     */
    public Invoices() {
        this(DSL.name("invoices"), null);
    }

    public <O extends Record> Invoices(Table<O> child, ForeignKey<O, InvoicesRecord> key) {
        super(child, key, INVOICES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InvoicesRecord, Integer> getIdentity() {
        return (Identity<InvoicesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvoicesRecord> getPrimaryKey() {
        return Keys.INVOICES_PK;
    }

    @Override
    public List<UniqueKey<InvoicesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.INVOICES_NUM_KEY);
    }

    @Override
    public List<ForeignKey<InvoicesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVOICES__INVOICES_ORGANIZATION_ID_FKEY);
    }

    private transient Organizations _organizations;

    /**
     * Get the implicit join path to the <code>public.organizations</code>
     * table.
     */
    public Organizations organizations() {
        if (_organizations == null)
            _organizations = new Organizations(this, Keys.INVOICES__INVOICES_ORGANIZATION_ID_FKEY);

        return _organizations;
    }

    @Override
    public List<Check<InvoicesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("check_num"), "(((num)::text ~ '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'::text))", true)
        );
    }

    @Override
    public Invoices as(String alias) {
        return new Invoices(DSL.name(alias), this);
    }

    @Override
    public Invoices as(Name alias) {
        return new Invoices(alias, this);
    }

    @Override
    public Invoices as(Table<?> alias) {
        return new Invoices(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(String name) {
        return new Invoices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(Name name) {
        return new Invoices(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(Table<?> name) {
        return new Invoices(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDate, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
